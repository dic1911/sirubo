#!/bin/sh

main()
{
	# = VARS =>

	set -u
	set -e
	umask u=rw,go=

	local list_asn=
	local list_prefixes_ipv4=
	local list_prefixes_ipv6=
	local name_program="sirubo"
	local whoisdomain="whois.radb.net"  # WHOIS domain to query for ASN prefixes.

	if [ "$(uname -s)" = "OpenBSD" ]
	then
		local fpath_conf="/etc/$name_program.conf"
		local fpath_ruleset="/etc/pf.$name_program.conf"
	fi

	if [ "$(uname -s)" = "Linux" ]
	then
		local fpath_conf="/usr/local/etc/$name_program.conf"
		local fpath_ruleset="/usr/local/etc/$name_program.ruleset"
		local fname_service="$name_program.service"
	fi

	# = ARGS =>

	if [ "$*" = "" ]
	then
		print_help
		exit 1
	fi

	if [ "$*" = "help" ]
	then
		print_help
		exit 1
	fi
	
	confirm_root_access                 || exit $?
	confirm_prerequisites "$fpath_conf" || exit $?

	if [ "$*" = "create" ]
	then
		# Import Program Configuration File:

		local list_asn="$(cat "$fpath_conf" | egrep -o "^AS[^ ]+")"

		# Create Firewall Ruleset Configuration File:

		if [ "$(uname -s)" = "OpenBSD" ]
		then
			# Create Anchor in pf.conf:

			if ! cat "/etc/pf.conf" | egrep -q "^anchor $name_program$"
			then
				printf "anchor $name_program" >> "/etc/pf.conf"
			fi

			# Create Ruleset:

			test -f "$fpath_ruleset.tmp" && rm -f "$fpath_ruleset.tmp"
			touch "$fpath_ruleset.tmp"

			# Perform WHOIS Query of ASN(s) for Prefixes:

			confirm_network_connection "$whoisdomain"
			confirm_asn "$whoisdomain" "$list_asn"

			local list_prefixes_ipv4="$(print_prefixes_ipv4 "$whoisdomain" "$list_asn")"
			local list_prefixes_ipv6="$(print_prefixes_ipv6 "$whoisdomain" "$list_asn")"

			if [ -z "$list_prefixes_ipv4" ] && [ -z "$list_prefixes_ipv6" ]
			then
				>&2 printf "> error: ASN queries did not return any prefix results.\n"
				exit 2
			fi

			# Add Rules to Reject ASN Prefixes:
			
			if ! [ -z "$list_prefixes_ipv4" ]
			then
				printf "$list_prefixes_ipv4\n" | while IFS= read -r prefix
				do
					printf "block return on any inet from any to $prefix\n" >> "$fpath_ruleset.tmp"
				done
			fi

			if ! [ -z "$list_prefixes_ipv6" ]
			then
				printf "$list_prefixes_ipv6\n" | while IFS= read -r prefix
				do
					printf "block return on any inet6 from any to $prefix\n" >> "$fpath_ruleset.tmp"
				done
			fi

			# Create Service for Ruleset Persistency:

			print_openbsd_service_file "$name_program" "$fpath_ruleset" > "/etc/rc.d/$name_program"
			chmod ugo=rx "/etc/rc.d/$name_program"
			rcctl enable "$name_program"

			# Load Ruleset:

			if [ -f "$fpath_ruleset" ]
			then
				mv -f "$fpath_ruleset" "$fpath_ruleset.backup"
			fi

			mv -f "$fpath_ruleset.tmp" "$fpath_ruleset"
			pfctl -a "$name_program" -f "$fpath_ruleset"
		fi

		if [ "$(uname -s)" = "Linux" ]
		then
			# Create Ruleset:

			test -f "$fpath_ruleset.tmp" && rm -f "$fpath_ruleset.tmp"
			touch "$fpath_ruleset.tmp"

			printf "#!/usr/sbin/nft -f\n\n"                                                                               >> "$fpath_ruleset.tmp"
			printf "add table inet $name_program\n"                                                                       >> "$fpath_ruleset.tmp"
			printf "flush table inet $name_program\n"                                                                     >> "$fpath_ruleset.tmp"
			printf "add chain inet $name_program $name_program { type filter hook output priority 0 ; policy accept; }\n" >> "$fpath_ruleset.tmp"

			# Perform WHOIS Query of ASN(s) for Prefixes:

			confirm_network_connection "$whoisdomain"
			confirm_asn "$whoisdomain" "$list_asn"

			local list_prefixes_ipv4="$(print_prefixes_ipv4 "$whoisdomain" "$list_asn")"
			local list_prefixes_ipv6="$(print_prefixes_ipv6 "$whoisdomain" "$list_asn")"

			if [ -z "$list_prefixes_ipv4" ] && [ -z "$list_prefixes_ipv6" ]
			then
				>&2 printf "> error: ASN queries did not return any prefix results.\n"
				exit 2
			fi

			# Add Rules to Reject ASN Prefixes:

			if ! [ -z "$list_prefixes_ipv4" ]
			then
				printf "$list_prefixes_ipv4\n" | while IFS= read -r prefix
				do
					printf "add rule inet $name_program $name_program ip daddr $prefix reject\n" >> "$fpath_ruleset.tmp"
				done
			fi

			if ! [ -z "$list_prefixes_ipv6" ]
			then
				printf "$list_prefixes_ipv6\n" | while IFS= read -r prefix
				do
					printf "add rule inet $name_program $name_program ip6 daddr $prefix reject\n" >> "$fpath_ruleset.tmp"
				done
			fi

			# Create Service for Ruleset Persistency:

			print_linux_systemd_service_file "$name_program" "$fpath_ruleset" > "/etc/systemd/system/$fname_service"
			systemctl -q daemon-reload
			systemctl -q reenable "$fname_service"

			# Load Ruleset:

			if [ -f "$fpath_ruleset" ]
			then
				mv -f "$fpath_ruleset" "$fpath_ruleset.backup"
			fi

			mv -f "$fpath_ruleset.tmp" "$fpath_ruleset"
			nft -f "$fpath_ruleset"
		fi

		exit
	fi

	if [ "$*" = "resume" ]
	then
		if [ "$(uname -s)" = "OpenBSD" ]
		then
			rcctl enable "$name_program"
			pfctl -a "$name_program" -f "$fpath_ruleset"
		fi

		if [ "$(uname -s)" = "Linux" ]
		then
			systemctl -q enable "$fname_service"
			nft -f "$fpath_ruleset"
		fi

		exit
	fi

	if [ "$*" = "stop" ]
	then
		if [ "$(uname -s)" = "OpenBSD" ]
		then
			rcctl disable "$name_program"
			pfctl -a "$name_program" -F rules 2> /dev/null
		fi

		if [ "$(uname -s)" = "Linux" ]
		then
			systemctl -q disable "$fname_service"
			nft delete table inet "$name_program" 2> /dev/null
		fi

		exit
	fi
}

confirm_asn()
{
	local whoisdomain="$1"
	local list_asn="$2"

	printf "$list_asn\n" | while IFS= read -r asn
	do
		if ! whois -h "$whoisdomain" -- -i origin "$asn" | egrep -q '^route\:'
		then
			>&2 printf "> warn: ASN \"%s\" did not return IPv4 prefix results.\n" "$asn"
		fi

		if ! whois -h "$whoisdomain" -- -i origin "$asn" | egrep -q '^route6\:'
		then
			>&2 printf "> warn: ASN \"%s\" did not return IPv6 prefix results.\n" "$asn"
		fi
	done
}

confirm_network_connection()
{
	local whoisdomain="$1"

	if nc -w 1 "$whoisdomain" 43
	then
		return
	else
		>&2 printf "> warn: \"%s\" unable to receive WHOIS requests.\n" "$whoisdomain"
		exit 2
	fi
}

confirm_prerequisites()
{
	if ! [ -f "$1" ]
	then
		printf "  info: Creating configuration file at \"%s\". Specify at least one ASN before continuing.\n" "$1"
		touch "$1" && \
			chown 0:0 "$1" && \
			chmod 600 "$1"
		return 1
	fi

	if ! cat "$1" | egrep -qo "^AS[^ ]+"
	then
		>&2 printf "> error: Configuration file (%s) does not contain at least one ASN. Specify before continuing.\n" "$1"
		return 2
	fi

	if [ "$(uname -s)" = "OpenBSD" ]
	then
		if ! which pfctl > /dev/null 2>&1
		then
			>&2 printf "> error: \"pfctl\" is a prerequisite and was not found.\n"
			return 2
		fi

		if ! which whois > /dev/null 2>&1
		then
			>&2 printf "> error: \"whois\" is a prerequisite and was not found.\n"
			return 2
		fi
	fi

	if [ "$(uname -s)" = "Linux" ]
	then

		if ! [ -d "/run/systemd/system" ]
		then
			>&2 printf "> error: \"systemd\" is a prerequisite and was not found.\n"
			return 2
		fi

		if ! which nft > /dev/null 2>&1
		then
			>&2 printf "> error: \"nft\" is a prerequisite and was not found.\n"
			return 2
		fi

		if ! which whois > /dev/null 2>&1
		then
			>&2 printf "> error: \"whois\" is a prerequisite and was not found.\n"
			return 2
		fi
	fi

	return 0
}

confirm_root_access()
{
	if [ "$(id -u)" != 0 ]
	then
		>&2 printf "> error: $(basename "$0") not running as root.\n"
		return 2
	fi
}

print_prefixes_ipv4()
{
	local whoisdomain="$1"
	local list_asn="$2"

	printf "$list_asn\n" | while IFS= read -r asn
	do
		whois -h "$whoisdomain" -- -i origin "$asn" | awk '/route:/ {print $2}'
	done
}

print_prefixes_ipv6()
{
	local whoisdomain="$1"
	local list_asn="$2"

	printf "$list_asn\n" | while IFS= read -r asn
	do
		whois -h "$whoisdomain" -- -i origin "$asn" | awk '/route6:/ {print $2}'
	done
}

print_help()
{
	cat <<EOF
Usage: $(basename "$0") [command]

  help      This very message.
  create    Generate firewall reject rules.
  stop      Undo firewall reject rules.
  resume    Resume enforcement of cached firewall reject rules.
EOF
}

print_linux_systemd_service_file()
{
	local name_program="$1"
	local fpath_ruleset="$2"

	cat <<EOF
[Unit]
Description=$name_program - ASN IP outbound traffic blocker
After=network-online.target

[Service]
Type=oneshot
ExecStartPre=/usr/sbin/nft -f "$fpath_ruleset"
ExecStart=/usr/local/bin/sirubo create

[Install]
WantedBy=multi-user.target
EOF
}

print_openbsd_service_file()
{
	local name_program="$1"
	local fpath_ruleset="$2"

	cat <<EOF
#!/bin/ksh

daemon="$(dirname "$(readlink -f "$0")")/$name_program"

. /etc/rc.d/rc.subr

rc_pre() {
	\${rcexec} "(pfctl -a "$name_program" -f "$fpath_ruleset" &)"
}

rc_start() {
	\${rcexec} "(\${daemon} create &)"
}

rc_cmd \$1
EOF
}

main "$@"
