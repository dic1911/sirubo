#!/bin/sh

main()
{
	set -u
	set -e
	umask u=rw,go=

	local name_program="sirubo"
	local whoisdomain="whois.radb.net"  # WHOIS domain to query for ASN subnetworks.
	local fpath_ruleset="/usr/local/etc/$name_program.ruleset"
	local fpath_conf="/usr/local/etc/$name_program.conf"
	local fname_service_linux="$name_program.service"
	local asnlist=""

	printf "\n"

	[ "$*" = "" ] &&
	{
		print_help
		exit 1
	}

	[ "$*" = "help" ] &&
	{
		print_help
		exit 1
	}

	check_running_as_root || exit $?

	[ "$*" = "create" ] &&
	{
		check_requirements "$fpath_conf" || exit $?

		# Import Program Configuration File:

		asnlist=$(cat "$fpath_conf" | egrep -o "^AS[^ ]+")

		# Create Firewall Ruleset Configuration File:

		if [ "$(uname -s)" = "Linux" ]
		then
			touch "$fpath_ruleset.tmp"

			printf "#!/usr/sbin/nft -f\n\n"                                                                               >> "$fpath_ruleset.tmp"
			printf "add table inet $name_program\n"                                                                       >> "$fpath_ruleset.tmp"
			printf "flush table inet $name_program\n"                                                                     >> "$fpath_ruleset.tmp"
			printf "add chain inet $name_program $name_program { type filter hook output priority 0 ; policy accept; }\n" >> "$fpath_ruleset.tmp"

			# Wait for Network Connection if Not Present:
			
			ping_loop=0

			until ping -q -c 1 "$whoisdomain" > /dev/null 2>&1
			do
				ping_loop=1
				printf "  info: Cannot ping \"%s\". Will not proceed until I can...\r" "$whoisdomain"
				sleep 1
			done

			if [ $ping_loop = 1 ]
			then
				printf "\n"
			fi

			# Verify Existence of User-Specified ASNs:

			echo "$asnlist" | while IFS= read -r asn
			do
				whois -h "$whoisdomain" -i origin "$asn" | egrep -q '^route\:' || {
					>&2 printf "> warn: ASN \"%s\" did not return IPv4 results.\n" "$asn"
				}

				whois -h "$whoisdomain" -i origin "$asn" | egrep -q '^route6\:' || {
					>&2 printf "> warn: ASN \"%s\" did not return IPv6 results.\n" "$asn"
				}
			done

			# Perform WHOIS Query of ASN for Associated Subnetworks:

			list_ipblock_4=$(
				echo "$asnlist" | while IFS= read -r asn
				do
					whois -h "$whoisdomain" -i origin "$asn" | egrep '^route\:' | awk '{print $2}'
				done
			)

			list_ipblock_6=$(
				echo "$asnlist" | while IFS= read -r asn
				do
					whois -h "$whoisdomain" -i origin "$asn" | egrep '^route6\:' | awk '{print $2}'
				done
			)

			# Add Rules to Drop ASN Subnetworks:

			[ $(printf "$list_ipblock_4" | wc -l) -ne 0 ] &&
			{
				echo "$list_ipblock_4" | while IFS= read -r subnet
				do
					printf "add rule inet $name_program $name_program ip daddr $subnet reject\n" >> "$fpath_ruleset.tmp"
				done
			}

			[ $(printf "$list_ipblock_6" | wc -l) -ne 0 ] &&
			{
				echo "$list_ipblock_6" | while IFS= read -r subnet
				do
					printf "add rule inet $name_program $name_program ip6 daddr $subnet reject\n" >> "$fpath_ruleset.tmp"
				done
			}

			# Create Service for Ruleset Persistency:

			print_linux_systemd_unit_file "$name_program" "$fpath_ruleset" > "/etc/systemd/system/$fname_service_linux"
			systemctl -q daemon-reload
			systemctl -q reenable "$fname_service_linux"

			# Load Firewall Ruleset:

			mv -f "$fpath_ruleset" "$fpath_ruleset.backup"
			mv -f "$fpath_ruleset.tmp" "$fpath_ruleset"
			nft -f "$fpath_ruleset"
		fi

		exit
	}

	[ "$*" = "resume" ] &&
	{
		if [ "$(uname -s)" = "Linux" ]
		then
			systemctl -q enable "$fname_service_linux"
			nft -f "$fpath_ruleset"
		fi

		exit
	}

	[ "$*" = "stop" ] &&
	{
		if [ "$(uname -s)" = "Linux" ]
		then
			systemctl -q disable "$fname_service_linux"
			nft delete table inet "$name_program" 2> /dev/null
		fi

		exit
	}
}

check_requirements()
{
	[ -f "$1" ] || {
		printf "  info: Creating configuration file at \"%s\". Specify at least one ASN before continuing.\n" "$1"
		touch "$1" && \
			chown 0:0 "$1" && \
			chmod 600 "$1"
		return 1
	}

	cat "$1" | egrep -qo "^AS[^ ]+" || {
		>&2 printf "> error: Configuration file (%s) does not contain at least one ASN. Specify before continuing.\n" "$1"
		return 2
	}

	uname -s | grep -q 'Linux' && which nft 2>&1 > /dev/null || {
		>&2 printf "> error: \"nft\" is a prerequisite and was not found.\n"
		return 2
	}

	uname -s | grep -q 'Linux' && which systemd 2>&1 > /dev/null || {
		>&2 printf "> error: \"systemd\" is a prerequisite and was not found.\n"
		return 2
	}

	uname -s | grep -q 'Linux' && which whois 2>&1 > /dev/null || {
		>&2 printf "> error: \"whois\" is a prerequisite and was not found.\n"
		return 2
	}

	return 0
}

check_running_as_root()
{
	if [ `id -u` -ne 0 ]
	then
		>&2 printf "> error: $(basename "$0") not running as root.\n"
		return 2
	fi
}

print_help()
{
	cat <<EOF
Usage: $(basename "$0") [command]

  help      This very message.
  create    Generate firewall reject rules.
  stop      Undo firewall reject rules.
  resume    Resume enforcement of cached firewall reject rules.
EOF
}

print_linux_systemd_unit_file()
{
	local name_program="$1"
	local fpath_ruleset="$2"

	cat <<EOF
[Unit]
Description=$name_program - ASN IP outbound traffic blocker
After=network-online.target

[Service]
Type=oneshot
ExecStartPre=sirubo create
ExecStart=/usr/sbin/nft -f "$fpath_ruleset"

[Install]
WantedBy=multi-user.target
EOF
}

main "$@"
