#!/bin/sh

set -u

# = VARS =>

chain="asnreject"
table="asnreject"
whoisdomain="whois.radb.net"  # WHOIS domain to query for ASN subnetworks.
fpath_firewall_conf="/usr/local/etc/asnreject.nft"
fpath_program_conf="/usr/local/etc/asnreject.conf"
asnlist=""

# = FUNC =>

check_requirements()
{
	[ -f "$1" ] || {
		printf "* INFO: Creating configuration file at \"%s\". Specify at least one ASN before continuing.\n" "$1"
		touch "$1" && chown 0:0 "$1" && chmod 600 "$1"
		return 1
	}

	cat "$1" | egrep -qo "^AS[^ ]+" || {
		>&2 printf "* ERROR: Configuration file (%s) does not contain at least one ASN. Specify before continuing.\n" "$1"
		return 2
	}

	uname -s | grep -q 'Linux' && which nft 2>&1 > /dev/null || {
		>&2 printf "* ERROR: \"nft\" is a prerequisite and was not found.\n"
		return 2
	}

	return 0
}

check_running_as_root()
{
	if [ `id -u` -ne 0 ]
	then
		>&2 printf "* ERROR: $(basename "$0") not running as root.\n"
		return 2
	fi
}

display_help()
{
	cat <<EOF
Usage: $(basename "$0") [options]

  create  Create new firewall drop rules.
  delete  Delete firewall drop rules.
  stop    Temporarily disregard firewall drop rules.
  resume  Resume enforcement of firewall drop rules.
EOF
}

# = TASK =>

if [ "$*" = "create" ]
then
	check_running_as_root || exit $?
	check_requirements "$fpath_program_conf" || exit $?

	# Import Program Configuration File:

	asnlist=$(cat "$fpath_program_conf" | egrep -o "^AS[^ ]+")

	# Create Firewall Ruleset Configuration File:

	rm -f "$fpath_firewall_conf"
	touch "$fpath_firewall_conf"
	chown root:root "$fpath_firewall_conf"
	chmod 644 "$fpath_firewall_conf"

	printf "#!/usr/sbin/nft -f\n\n" >> "$fpath_firewall_conf"
	printf "add table inet $table\n" >> "$fpath_firewall_conf"
	printf "add chain inet $table $chain { type filter hook output priority 0 ; policy accept; }\n" >> "$fpath_firewall_conf"

	# Verify Existence of User-Specified ASNs:

	echo "$asnlist" | while IFS= read -r asn
	do
		whois -h "$whoisdomain" -i origin "$asn" | egrep -q '^route\:' || {
			>&2 printf "* WARN: Query of ASN \"%s\" did not return IPv4 subnetwork results.\n" "$asn"
		}

		whois -h "$whoisdomain" -i origin "$asn" | egrep -q '^route6\:' || {
			>&2 printf "* WARN: Query of ASN \"%s\" did not return IPv6 subnetwork results.\n" "$asn"
		}
	done

	# Perform WHOIS Query of ASN for Associated Subnetworks:

	list_ipblock_4=$(
		echo "$asnlist" | while IFS= read -r asn
		do
			whois -h "$whoisdomain" -i origin "$asn" | egrep '^route\:' | awk '{print $2}'
		done
	)

	list_ipblock_6=$(
		echo "$asnlist" | while IFS= read -r asn
		do
			whois -h "$whoisdomain" -i origin "$asn" | egrep '^route6\:' | awk '{print $2}'
		done
	)

	# Add Rules to Drop ASN Subnetworks:

	[ $(printf "$list_ipblock_4" | wc -l) -ne 0 ] &&
	{
		echo "$list_ipblock_4" | while IFS= read -r subnet
		do
			printf "add rule inet $table $chain ip daddr $subnet drop\n" >> "$fpath_firewall_conf"
		done
	}

	[ $(printf "$list_ipblock_6" | wc -l) -ne 0 ] &&
	{
		echo "$list_ipblock_6" | while IFS= read -r subnet
		do
			printf "add rule inet $table $chain ip6 daddr $subnet drop\n" >> "$fpath_firewall_conf"
		done
	}

	# Include Firewall Ruleset in Main Netfilter Configuration File for Persistencey:

	egrep -q "^include \"$fpath_firewall_conf\"$" "/etc/nftables.conf" || (
		printf "include \"$fpath_firewall_conf\"" >> "/etc/nftables.conf"
	)

	# Load Firewall Ruleset:

	nft delete table inet "$table" 2> /dev/null
	nft -f "$fpath_firewall_conf"

elif [ "$*" = "delete" ]
then
	check_running_as_root || exit $?

	sed -i "/$table/d" "/etc/nftables.conf"
	nft delete table inet "$table" 2> /dev/null

	exit

elif [ "$*" = "resume" ]
then
	check_running_as_root || exit $?

	nft -f "$fpath_firewall_conf"

	exit

elif [ "$*" = "stop" ]
then
	check_running_as_root || exit $?

	nft delete table inet "$table" 2> /dev/null

	exit

else
	display_help
	exit 1
fi

exit

