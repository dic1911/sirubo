#!/bin/sh

main()
{
	set -u
	umask u=rw,go=

	local table="asndrop"
	local chain="asndrop"
	local whoisdomain="whois.radb.net"  # WHOIS domain to query for ASN subnetworks.
	local fpath_ruleset="/usr/local/etc/asndrop.ruleset"
	local fpath_conf="/usr/local/etc/asndrop.conf"
	local fname_service_linux="asndrop.service"
	local asnlist=""

	[ "$*" = "" ] &&
	{
		display_help
		exit 1
	}

	[ "$*" = "help" ] &&
	{
		display_help
		exit 1
	}

	check_running_as_root || exit $?

	[ "$*" = "create" ] &&
	{
		check_requirements "$fpath_conf" || exit $?

		# Import Program Configuration File:

		asnlist=$(cat "$fpath_conf" | egrep -o "^AS[^ ]+")

		# Create Firewall Ruleset Configuration File:

		if [ "$(uname -s)" = "Linux" ]
		then
			rm -f     "$fpath_ruleset"
			touch     "$fpath_ruleset"
			chown 0:0 "$fpath_ruleset"

			printf "#!/usr/sbin/nft -f\n\n"                                                                 >> "$fpath_ruleset"
			printf "add table inet $table\n"                                                                >> "$fpath_ruleset"
			printf "flush table inet $table\n"                                                              >> "$fpath_ruleset"
			printf "add chain inet $table $chain { type filter hook output priority 0 ; policy accept; }\n" >> "$fpath_ruleset"

			# Verify Existence of User-Specified ASNs:

			echo "$asnlist" | while IFS= read -r asn
			do
				whois -h "$whoisdomain" -i origin "$asn" | egrep -q '^route\:' || {
					>&2 printf "* WARN: ASN \"%s\" did not return IPv4 subnetwork results.\n" "$asn"
				}

				whois -h "$whoisdomain" -i origin "$asn" | egrep -q '^route6\:' || {
					>&2 printf "* WARN: ASN \"%s\" did not return IPv6 subnetwork results.\n" "$asn"
				}
			done

			# Perform WHOIS Query of ASN for Associated Subnetworks:

			local list_ipblock_4=$(
				echo "$asnlist" | while IFS= read -r asn
				do
					whois -h "$whoisdomain" -i origin "$asn" | egrep '^route\:' | awk '{print $2}'
				done
			)

			local list_ipblock_6=$(
				echo "$asnlist" | while IFS= read -r asn
				do
					whois -h "$whoisdomain" -i origin "$asn" | egrep '^route6\:' | awk '{print $2}'
				done
			)

			# Add Rules to Drop ASN Subnetworks:

			[ $(printf "$list_ipblock_4" | wc -l) -ne 0 ] &&
			{
				echo "$list_ipblock_4" | while IFS= read -r subnet
				do
					printf "add rule inet $table $chain ip daddr $subnet drop\n" >> "$fpath_ruleset"
				done
			}

			[ $(printf "$list_ipblock_6" | wc -l) -ne 0 ] &&
			{
				echo "$list_ipblock_6" | while IFS= read -r subnet
				do
					printf "add rule inet $table $chain ip6 daddr $subnet drop\n" >> "$fpath_ruleset"
				done
			}
		fi

		# Create Service for Ruleset Persistency:

		cp -f "$fname_service_linux" "/etc/systemd/system/$fname_service_linux"
		systemctl -q daemon-reload
		systemctl -q reenable "$fname_service_linux"

		# Load Firewall Ruleset:

		nft -f "$fpath_ruleset"

		exit
	}

	[ "$*" = "resume" ] &&
	{
		systemctl -q enable "$fname_service_linux"
		nft -f "$fpath_ruleset"
		exit
	}

	[ "$*" = "stop" ] &&
	{
		systemctl -q disable "$fname_service_linux"
		nft delete table inet "$table" 2> /dev/null
		exit
	}
}

check_requirements()
{
	[ -f "$1" ] || {
		printf "* INFO: Creating configuration file at \"%s\". Specify at least one ASN before continuing.\n" "$1"
		touch "$1" && \
			chown 0:0 "$1" && \
			chmod 600 "$1"
		return 1
	}

	cat "$1" | egrep -qo "^AS[^ ]+" || {
		>&2 printf "* ERROR: Configuration file (%s) does not contain at least one ASN. Specify before continuing.\n" "$1"
		return 2
	}

	uname -s | grep -q 'Linux' && which nft 2>&1 > /dev/null || {
		>&2 printf "* ERROR: \"nft\" is a prerequisite and was not found.\n"
		return 2
	}

	uname -s | grep -q 'Linux' && which whois 2>&1 > /dev/null || {
		>&2 printf "* ERROR: \"whois\" is a prerequisite and was not found.\n"
		return 2
	}

	return 0
}

check_running_as_root()
{
	if [ `id -u` -ne 0 ]
	then
		>&2 printf "* ERROR: $(basename "$0") not running as root.\n"
		return 2
	fi
}

display_help()
{
	cat <<EOF
Usage: $(basename "$0") [options]

  help    This very message.
  create  Generate firewall drop rules.
  stop    Undo firewall drop rules.
  resume  Resume enforcement of cached firewall drop rules.
EOF
}

main "$@"
