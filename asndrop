#!/bin/sh

set -u

# = VARS =>

CHAIN="ASNDROP"                # `iptables` firewall chain for script.
WHOISDOMAIN="whois.radb.net"   # WHOIS domain used to query ASNs.
PATHFILE_CONFIG="/etc/asndrop"
CHAIN_ALREADYEXISTS=false      # Whether `iptables` firewall chain already exists.
ASNLIST=""                     # Array of ASN subnetworks to query.

# = FUNC =>

check_requirements()
{
	if [ ! -f "$1" ]
	then
		printf "\n* ERROR: Configuration file does not exist at \"%s\".\n" "$1"
		return 1
	elif [ ! -s "$1" ]
	then
		printf "\n* ERROR: Configuration file (%s) is empty. Specify at least one ASN before continuing.\n" "$1"
		return 1
	else
		return 0
	fi
}

check_running_as_root()
{
	if [ `id -u` -ne 0 ]
	then
		printf "\n* ERROR: $(basename "$0") not running as root.\n"
		return 1
	fi
}

display_help()
{
	cat <<EOF
Usage: $(basename "$0") [options]

  create  Query ASN(s) for IP subnetworks and create new firewall drop rules.
  delete  Delete firewall drop rules.
  undrop  Temporarily disregard current firewall drop rules.
  redrop  Reinstate current firewall drop rules.
EOF
}

# = TASK =>

if [ "$*" = "create" ]
then
	check_running_as_root || exit 1
	check_requirements "$PATHFILE_CONFIG" || exit 1

	ASNLIST=$(cat "$PATHFILE_CONFIG")

	# Confirm Existence of Firewall Chain:

	iptables -C INPUT -j "$CHAIN" 2> /dev/null && {
		printf "\n* ERROR: iptables firewall chain \"%s\" already exists. Redo chain creation process with \"delete\" and \"create\" arguments before continuing.\n" "$CHAIN"
		CHAIN_ALREADYEXISTS=true
	}

	ip6tables -C INPUT -j "$CHAIN" 2> /dev/null && {
		printf "\n* ERROR: ip6tables firewall chain \"%s\" already exists. Redo chain creation process with \"delete\" and \"create\" arguments before continuing.\n" "$CHAIN"
		CHAIN_ALREADYEXISTS=true
	}

	if [ "$CHAIN_ALREADYEXISTS" = true ]
	then
		exit 1
	fi

elif [ "$*" = "delete" ]
then
	check_running_as_root || exit 1

	iptables -F "$CHAIN"
	iptables -C INPUT -j "$CHAIN" 2> /dev/null && iptables -D INPUT -j "$CHAIN" 2> /dev/null
	iptables -X "$CHAIN"

	ip6tables -F "$CHAIN"
	ip6tables -C INPUT -j "$CHAIN" 2> /dev/null && ip6tables -D INPUT -j "$CHAIN" 2> /dev/null
	ip6tables -X "$CHAIN"

	iptables-save 1> /dev/null
	ip6tables-save 1> /dev/null

	exit

elif [ "$*" = "redrop" ]
then
	check_running_as_root || exit 1

	iptables -A INPUT -j "$CHAIN"
	ip6tables -A INPUT -j "$CHAIN"

	iptables-save 1> /dev/null
	ip6tables-save 1> /dev/null

	exit

elif [ "$*" = "undrop" ]
then
	check_running_as_root || exit 1

	iptables -D INPUT -j "$CHAIN"
	ip6tables -D INPUT -j "$CHAIN"

	iptables-save 1> /dev/null
	ip6tables-save 1> /dev/null

	exit

else
	display_help
	exit 1
fi

# Confirm Existence of Listed ASNs:

echo "$ASNLIST" | while IFS= read -r ASN
do
	whois -h "$WHOISDOMAIN" -i origin "$ASN" | egrep -q '^route\:' || {
		printf "\n* WARN: Query of ASN \"%s\" did not return IPv4 subnetwork results.\n" "$ASN"
	}

	whois -h "$WHOISDOMAIN" -i origin "$ASN" | egrep -q '^route6\:' || {
		printf "\n* WARN: Query of ASN \"%s\" did not return IPv6 subnetwork results.\n" "$ASN"
	}
done

# Get List of ASN Subnetworks:

LIST_IPBLOCK_4=$(
	echo "$ASNLIST" | while IFS= read -r ASN
	do
		whois -h "$WHOISDOMAIN" -i origin "$ASN" | egrep '^route\:' | awk '{print $2}'
	done
)

LIST_IPBLOCK_6=$(
	echo "$ASNLIST" | while IFS= read -r ASN
	do
		whois -h "$WHOISDOMAIN" -i origin "$ASN" | egrep '^route6\:' | awk '{print $2}'
	done
)

[ $(printf "$LIST_IPBLOCK_4" | wc -l) -ne 0 ] &&
{
	# Create and Clear Firewall Chain:

	iptables -N "$CHAIN"
	iptables -A INPUT -j "$CHAIN"
	iptables -F "$CHAIN"

	# Add Rule to Drop ASN Subnetworks:

	echo "$LIST_IPBLOCK_4" | while IFS= read -r SUBNET
	do
		iptables -A "$CHAIN" -s "$SUBNET" -j DROP
	done

	# Save Firewall Configuration:

	iptables-save 1> /dev/null
}

[ $(printf "$LIST_IPBLOCK_6" | wc -l) -ne 0 ] &&
{
	# Create and Clear Firewall Chain:

	ip6tables -N "$CHAIN"
	ip6tables -A INPUT -j "$CHAIN"
	ip6tables -F "$CHAIN"

	# Add Rule to Drop ASN Subnetworks:

	echo "$LIST_IPBLOCK_6" | while IFS= read -r SUBNET
	do
		ip6tables -A "$CHAIN" -s "$SUBNET" -j DROP
	done

	# Save Firewall Configuration:

	ip6tables-save 1> /dev/null
}

exit
